---
page_title_show: true
title: Artoo API
author: The Hybrid Group
page_title: Guides
page_subtitle: A Guide by Humans, for Humans.
layout: documentation
active_menu_docs: true
---
-content_for :js_accordeon do
	:javascript
		$("#guides-panel").addClass("active-panel");
		$("#guides-panel ul li:nth-child(3)").addClass("active-link");
		$(".accordion-docs dt:nth-child(5) a:nth-child(2) img").addClass("rotate");

%h1  How To Connect with the API
%p With artoo can access a running API server.
%h3 Running your robot:
:markdown	
	To test your code you can type this on your console:

	    :::ruby
		artoo start myrobot.rb

	or

	    :::ruby
	    ruby myrobot.rb

	For example, on this code:

	    :::ruby
		require 'artoo'
		
		connection :loop
		device :passthru
		api :host => '127.0.0.1', :port => '4321'
		
		work do
		  puts "Hello from the API running at \#{api_host}:\#{api_port}..."
		end

%p artoo automatically, starts the server.
%h2  How To Configure
%p The Artoo API server, allows a configuration for your robots.
:markdown	
	You can set it up like this:

	    :::ruby
		  api :host => '127.0.0.1', :port => '4321'
		
	Now you can run the server on the curl : `http://127.0.0.1:4321`.

	For example:

	    :::ruby
	    require 'artoo'

	    connection :loop
	    device :passthru
	    api :host => '127.0.0.1', :port => '4321'

	    work do
	      puts "Hello from the API running at \#{api_host}:\#{api_port}..."
	    end	

%h2 Robeaux
%p Robeaux (/rō-bō/) is a universal dashboard to your robotic devices. Like a router admin page, but for robots.
%p Robeaux is powered by AngularJS, and provides a front-end to the API interface offered by Artoo
%p It can be accessed with a browser in the configured host and port. (Ex. http://127.0.0.1:4321/)
%p= link_to 'More information about Robeaux', 'https://github.com/hybridgroup/robeaux/blob/master/README.markdown'

%h2 Routes
%h3  GET /robots
:markdown	
	Our first route returns all the Robots the master class knows about in JSON
	format.
	   
	    [
	      {
	        "name": "SpheroBot",
	        "connections": [
	          {
	            "name": "sphero",
	            "port": "/dev/rfcomm0",
	            "adaptor": "Sphero",
	            "connection_id": 2778
	          }
	        ],
	        "devices": [
	          {
	            "name": "sphero",
	            "driver": "Sphero",
	            "pin": null,
	            "connection": {
	              "name": "sphero",
	              "port": "/dev/rfcomm0",
	              "adaptor": "Sphero",
	              "connection_id": 2778
	            },
	            "commands": [
	              "detect_collisions",
	              "roll",
	              "set_color",
	              "color",
	              "stop"
	            ]
	          }
	        ]
	      }
	    ]

%h3 GET /robots/:robotid
:markdown	
	Given a robot's name, returns JSON information about the requested Robot:

	    {
	      "name": "SpheroBot",
	      "connections": [
	        {
	          "name": "sphero",
	          "port": "/dev/rfcomm0",
	          "adaptor": "Sphero",
	          "connection_id": 2778
	        }
	      ],
	      "devices": [
	        {
	          "name": "sphero",
	          "driver": "Sphero",
	          "pin": null,
	          "connection": {
	            "name": "sphero",
	            "port": "/dev/rfcomm0",
	            "adaptor": "Sphero",
	            "connection_id": 2778
	          },
	          "commands": [
	            "detect_collisions",
	            "roll",
	            "set_color",
	            "color",
	            "stop"
	          ]
	        }
	      ]
	    }

%h3  GET /robots/:robotid/devices
:markdown	
	Given a robot's name, returns JSON information about the devices belonging to
	the requested Robot:

	    [
	      {
	        "name": "sphero",
	        "driver": "Sphero",
	        "pin": null,
	        "connection": {
	          "name": "sphero",
	          "port": "/dev/rfcomm0",
	          "adaptor": "Sphero",
	          "connection_id": 2778
	        },
	        "commands": [
	          "detect_collisions",
	          "roll",
	          "set_color",
	          "color",
	          "stop"
	        ]
	      }
	    ]

%h3  GET /robots/:robotid/devices/:deviceid
:markdown	
	Given the names of a device and the robot it belongs to, returns data on the
	specified device.

	    {
	      "name": "sphero",
	      "driver": "Sphero",
	      "pin": null,
	      "connection": {
	        "name": "sphero",
	        "port": "/dev/rfcomm0",
	        "adaptor": "Sphero",
	        "connection_id": 2778
	      },
	      "commands": [
	        "detect_collisions",
	        "roll",
	        "set_color",
	        "color",
	        "stop"
	      ]
	    }

%h3 GET /robots/:robotid/devices/:deviceid/commands
:markdown	
	Given the names of a device and the robot it belongs to, returns all commands
	available for the specified device.

	    [
	      "detect_collisions",
	      "roll",
	      "set_color",
	      "color",
	      "stop"
	    ]

%h3 POST /robots/:robotid/devices/:deviceid/commands/:commandid
:markdown	
	Given a robot name, device name, and command name, executes a robot's command
	and returns the result.

	    // example pending

%h3 GET /robots/:robotid/connections
:markdown	
	Given a robot's name, returns JSON information about the connections belonging
	to the requested Robot:

	    [
	      {
	        "name": "sphero",
	        "port": "/dev/rfcomm0",
	        "adaptor": "Sphero",
	        "connection_id": 2778
	      }
	    ]

%h3  GET /robots/:robotid/connections/:connectionid
:markdown	
	Given a robot's name, returns JSON information about the connections belonging
	to the requested Robot:

	    {
	      "name": "sphero",
	      "port": "/dev/rfcomm0",
	      "adaptor": "Sphero",
	      "connection_id": 2778
	    }

%h3 WS_GET /robots/:robotid/devices/:deviceid/events/:eventid
%p Routes to a Reel route to handle WebSockets connections requesting updates on device events.
