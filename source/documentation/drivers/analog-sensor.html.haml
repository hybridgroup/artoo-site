---
page_title_show: true
title: Artoo - Analog Sensor Driver
author: The Hybrid Group
page_title: Drivers
page_subtitle: Artoo has a extensible system for connecting to hardware devices.
page_title_docs: Analog Sensor
page_subtitle_docs: <a href='https://github.com/hybridgroup/artoo-gpio' class='repository'>Repository</a>
layout: documentation
subnav_driver: true
subnav_circuit_driver: true
active_menu_docs: true
subnavjs: true

arduino_platform: true
digispark_platform: true
spark_platform: true
---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#gpio li:nth-child(1)").addClass("active-link");
    $(".accordion-docs dt:nth-child(9) a:nth-child(2) img").addClass("rotate");

%section.intro
  = image_tag "/images/devices/analog-sensor.jpg", class: "display"
  .info_intro
    %p
      Makes it possible to interact with analog inputs on your device and obtain values that represent the analog input send by the sensors.
      The value received from an analog input read from the sensor goes from 0 to 1027.
  .clear

%section.how_to#HowToConnect
  %h2 How To Connect
  %h3 For Arduino:
  :markdown
        :::ruby
        require 'artoo'
        connection :arduino, :adaptor => :firmata, :port => '127.0.0.1:8023'
        device :sensor, driver: :analog_sensor, pin: 0, interval: 0.25, upper: 900, lower: 200

  %h3 For Digispark:
  :markdown
        :::ruby
        require 'artoo'
        connection :digispark, :adaptor => :littlewire, :vendor => 0x1781, :product => 0x0c9f
        device :sensor, driver: :analog_sensor, pin: 0, interval: 0.25, upper: 900, lower: 200

%section.how-to#HowToUse
  %h2 How To Use
  %h3 Example using a photoresistor sensor to turn a LED on and off.
  :markdown
        :::ruby
        require 'artoo'

        connection :arduino, :adaptor => :firmata, :port => '127.0.0.1:8023'

        # Analog inputs are based from 0 to 5 on the Arduino UNO, may vary on other arduino boards
        device :sensor, driver: :analog_sensor, pin: 0, interval: 0.25, upper: 900, lower: 200
        device :led, :driver => :led, :pin => 8

        work do
          puts
          puts "Reading sensor in analog pin \#{ sensor.pin }"
          puts "Reading intervals every => \#{ sensor.interval }"
          puts "Initial sensor value => \#{ sensor.analog_read(0) }"
          puts "Sensor upper trigger set at value => \#{ sensor.upper }"
          puts "Sensor lower trigger set at value => \#{ sensor.lower }"

          on sensor, :upper => proc {
            puts "UPPER LIMIT REACHED!"
            led.off
          }

          on sensor, :lower => proc {
            puts "LOWER SENSOR LIMIT REACHED!"
            led.on
          }
        end


  %h3 How to use events and call them on your drivers
  %p Pretty simple, when the connection and the driver have been setup (as explained above) you can call events on them as follows:
  :markdown
        :::ruby
        on sensor, :upper => proc { puts "UPPER LIMIT REACHED!" }
        on sensor, :lower => proc { puts "LOWER LIMIT REACHED!" }

%section.public-methods
  .commands-api#Commands
    = partial "/documentation/drivers/partials/gpio/commands_analog_sensor"
  .commands-api#Events
    = partial "/documentation/drivers/partials/gpio/events_analog_sensor"


%section.circuit#Circuit
  %h2 Circuit 
  .description-circuit
    %p
  .image-circuit
    %img{:src => "/documentation/drivers/breadboards/gpio/analog_sensor_bb.png", :alt => ""}/ 
  .clear 
  
%section.compatibility.hardware#Compatability
  %h2 Compatibility
  .devices
    =# TODO: Update platform list at the top of the page.
    = partial "documentation/partials/devices_platforms"
