---
page_title_show: true
title: Artoo - Motor Driver
author: The Hybrid Group
page_title: Drivers
page_subtitle: Artoo has a extensible system for connecting to hardware devices.
page_title_docs: Motor
page_subtitle_docs: <a href='https://github.com/hybridgroup/artoo-gpio' class='repository'>Repository</a>
layout: documentation
subnav_driver: true
subnav_circuit_driver: true
active_menu_docs: true
subnavjs: true

arduino_platform: true
beaglebone_platform: true
digispark_platform: true
raspberry_platform: true
spark_platform: true
---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#gpio li:nth-child(7)").addClass("active-link");
    $(".accordion-docs dt:nth-child(9) a:nth-child(2) img").addClass("rotate");

%section.intro
  =image_tag "/images/devices/motor.jpg", class: "display"
  .info_intro
    %p 
      Provides motor manipulation tools for artoo like on/off, speed modulation using PWM, use of bidirectional motors using forward/backward pins.
  .clear
  
%section.how_to#HowToConnect
  %h2 How To Connect
  %h3 For Arduino:
  :markdown
        :::ruby
        require 'artoo'
        connection :arduino, :adaptor => :firmata, :port => '127.0.0.1:8023'
        device :motor, :driver => :motor, :speed_pin => 3 # Use a PWM pin

  %h3 For Digispark:
  :markdown
        :::ruby
        require 'artoo'
        connection :digispark, :adaptor => :littlewire, :vendor => 0x1781, :product => 0x0c9f
        device :motor, :driver => :motor, :speed_pin => 3 # Use a PWM pin

%section.how-to#HowToUse
  %h2 How To Use
  %h3 Example of a dc motor with speed changes using PWM.
  :markdown
        :::ruby
        require 'artoo'

        #Circuit's breadboard layout here: http://learn.adafruit.com/adafruit-arduino-lesson-13-dc-motors/breadboard-layout

        #connection :arduino, :adaptor => :firmata, :port => '/dev/tty*'
        connection :arduino, :adaptor => :firmata, :port => '127.0.0.1:8023'
        device :board, :driver => :device_info
        device :motor, :driver => :motor, :speed_pin => 3 # Use a PWM pin

        work do
          puts "Firmware name: \#{board.firmware_name}"
          puts "Firmata version: \#{board.version}"
          puts "Stopping motor..."
          motor.min # same as 'motor.stop' or 'motor.speed(0)'
          sleep 3
          puts "Setting to maximum speed..."
          motor.max # same as 'motor.start'
          sleep 3

          speed = 0
          step = 50

          every 3.seconds do
            motor.speed(speed)
            puts "Current speed: \#{motor.current_speed}"
            speed += step
            if [0, 250].include?(speed)
              step = -step
            end
          end
        end

  %h3 Example of a dc motor with direction and speed change.
  :markdown
        :::ruby
        require 'artoo'

        #Circuit's breadboard layout for the L293D: http://www.electrojoystick.com/tutorial/?p=759
        #For the L239DNE: http://bit.ly/14QdjD5

        #connection :arduino, :adaptor => :firmata, :port => '/dev/tty*'
        connection :arduino, :adaptor => :firmata, :port => '127.0.0.1:8023'
        device :board, :driver => :device_info
        device :motor, :driver => :motor, 
                       :forward_pin  => 4, # Digital or PWM pin
                       :backward_pin => 2, # Digital or PWM pin
                       :speed_pin    => 9  # PWM pin only

        work do
          puts "Firmware name: \#{board.firmware_name}"
          puts "Firmata version: \#{board.version}"
          puts "Stopping motor..."
          motor.stop
          sleep 2

          loop do
            motor.forward # if no speed set, spins at max speed
            puts "Going forward, Speed: \#{motor.current_speed}"
            sleep 3
            motor.forward 180
            puts "Going forward, Speed: \#{motor.current_speed}"
            sleep 3
            puts "Stopping..."
            motor.stop
            sleep 2
            motor.backward(150) # spins at speed 150
            puts "Going backward, Speed: \#{motor.current_speed}"
            sleep 3
            motor.backward(255)
            puts "Going backward, Speed: \#{motor.current_speed}"
            sleep 3
          end
        end

%section.public-methods
  .commands-api#Commands
    = partial "/documentation/drivers/partials/gpio/commands_motor"

%section.circuit#Circuit
  %h2 Circuit
  .description-circuit
    %p  
  .image-circuit 
    %img{:src => "/documentation/drivers/breadboards/gpio/motor_bb.png", :alt => ""}/ 
  .clear 

%section.compatability.hardware#Compatability
  %h2 Compatibility
  %p 
    %b Important Note:
    You need to install
    = link_to "pi-blaster", "https://github.com/sarfata/pi-blaster", target: :blank
    in the 
    %b raspberry-pi, 
    this project enables PWM in the GPIO pins .
  =# TODO: Update platform list at the top of the page.
  .devices
    = partial "documentation/partials/devices_platforms"


