---
page_title_show: true
title: Artoo - ARDrone Navigation Driver
author: The Hybrid Group
page_title: Drivers
page_subtitle: Artoo has a extensible system for connecting to hardware devices.
page_title_docs: Ardrone Navigation
page_subtitle_docs: <a href='https://github.com/hybridgroup/artoo-ardrone' class='repository'>Repository</a>
layout: documentation
subnav_driver: true
active_menu_docs: true
subnavjs: true

ardrone_platform: true

---
-content_for :js_accordeon do
  :javascript
    $("#driver-panel").addClass("active-panel");
    $("#ardrone li:nth-child(2)").addClass("active-link");
    $(".accordion-docs dt:nth-child(9) a:nth-child(2) img").addClass("rotate");

%section.intro
  =image_tag "/images/devices/ardrone-navigation.jpg", class: "display"
  .info_intro
    %p
      Allows user to receive in-flight navgation data from an ARDrone. Navigation data includes such information as the ARDrone's current pitch and yaw, along with many other data elements.
  .clear

%section.how_to#HowToConnect
  %h2 How To Connect
  %p
    Communication with the ARDrone's navigation data interface takes place using a WiFi connection. The ARDrone is a WiFi access point, so it normally can be the only device you connect to, without some additional effort to reconfigure the drone itself to put it into infrastructure mode.

  :markdown
        :::ruby
        require 'artoo'
        connection :navigation, :adaptor => :ardrone_navigation, :port => '192.168.1.1:5554'
        device :nav, :driver => :ardrone_navigation, :connection => :navigation

%section.how-to#HowToUse
  %h2 How To Use
  %h3 How to use events and call them on your drivers
  %p Pretty simple, when the connection and the driver have been setup (as explained above) you can call events on them as follows:
  :markdown
        :::ruby
        on nav, :navdata => proc { |caller, navdata| puts "Sequence number: \#{ navdata.sequence_number }" }
        on nav, :demo => proc { |caller, navdata, nav_option_demo| 
          puts "Ardrone pitch: \#{ nav_option_demo.pitch }"
          puts "Ardrone roll:  \#{ nav_option_demo.roll }"
          puts "Ardrone yaw:   \#{ nav_option_demo.yaw }"
        }
        on nav, :vision_detect => proc { |caller, navdata, nav_option_vision_detect|
          puts "Vision detect count: \#{ nav_option_vision_detect.detected_count }"
          puts "Vision detect type: \#{ nav_option_vision_detect.type }"
          puts "Vision detect name: \#{ nav_option_vision_detect.name }"
        }
  %h3 Example of receiving navigation data from an ARDrone.
  :markdown
        :::ruby
        require 'artoo'

        connection :navigation, :adaptor => :ardrone_navigation, :port => '192.168.1.1:5554'
        device :nav, :driver => :ardrone_navigation, :connection => :navigation

        work do
          on nav, :navdata => :nav_update
        end

        def nav_update(*data)
          p data[1].inspect
        end

%section.public-methods
  .commands-api#Commands
    = partial "/documentation/drivers/partials/ardrone/commands_nav"
  .commands-api#Events
    = partial "/documentation/drivers/partials/ardrone/events_nav"



%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    =# TODO: Update platform list at the top of the page.
    = partial "documentation/partials/devices_platforms"
